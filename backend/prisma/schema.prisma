generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Eligible {
  student_id      String           @id(map: "Eligible_pk") @unique(map: "Eligible_pk2")
  prefix          String
  firstname       String
  lastname        String
  firstname_eng   String
  lastname_eng    String
  year            Int
  semester        Int
  registered      String
  faculty         String
  prefix_eng      String
  ActivityhourLog ActivityhourLog?
}

model Faculty {
  id       Int    @id @default(autoincrement())
  name     String
  name_eng String
}

model Election {
  id              Int               @id @default(autoincrement())
  name            String
  description     String
  year            Int
  type            ElectionType
  count_vote      Boolean
  created_at      DateTime          @db.Timestamptz(6)
  start_date      DateTime          @db.Timestamptz(6)
  end_date        DateTime          @db.Timestamptz(6)
  ActivityhourLog ActivityhourLog[]
  Candidate       Candidate[]
  Party           Party[]
  Question        Question[]
  VoteCandidate   VoteCandidate[]
  VoteLog         VoteLog?
  VoteParty       VoteParty[]
  Waiver          Waiver[]
}

model Party {
  id             Int           @id @default(autoincrement())
  application_no String        @unique
  name           String
  abbreviate     String
  amount         Int
  symbol         String
  group_image    String
  is_verified    Boolean
  election_id    Int
  no             Int
  name_eng       String?
  Answer         Answer[]
  election       Election      @relation(fields: [election_id], references: [id])
  PartyMember    PartyMember[]
  VoteParty      VoteParty?
}

model PartyMember {
  id           Int       @id @default(autoincrement())
  no           Int
  position     String
  party_id     Int
  candidate_id Int       @unique
  candidate    Candidate @relation(fields: [candidate_id], references: [id])
  party        Party     @relation(fields: [party_id], references: [id])
}

model Candidate {
  id                   Int             @id @default(autoincrement())
  student_id           String
  prefix               Prefix
  firstname            String
  lastname             String
  nickname             String
  dob                  DateTime
  disciplinary_history Boolean
  year                 Int
  major                String
  department           String?
  gpax                 Float
  election_id          Int
  faculty              String
  image_url            String
  consent              Boolean
  is_verified          Boolean
  application_no       String
  Answer               Answer[]
  election             Election        @relation(fields: [election_id], references: [id])
  CandidateEng         CandidateEng[]
  Contact              Contact[]
  PartyMember          PartyMember?
  VoteCandidate        VoteCandidate[]
}

model CandidateEng {
  id           Int       @id @default(autoincrement())
  firstname    String
  lastname     String
  nickname     String
  major        String
  department   String?
  faculty      String
  prefix       Prefix
  candidate_id Int
  Candidate    Candidate @relation(fields: [candidate_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "candidateeng_candidate_id_fk")
}

model Contact {
  id             Int       @id @default(autoincrement())
  phone_no       String
  personal_enail String
  kmutt_email    String
  line_id        String
  facebook       String?
  ig             String?
  address        String
  candidate_id   Int
  Candidate      Candidate @relation(fields: [candidate_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "contact_candidate_id_fk")
}

model VoteParty {
  election_id Int
  party_id    Int      @unique
  score       Int
  election    Election @relation(fields: [election_id], references: [id])
  party       Party    @relation(fields: [party_id], references: [id])

  @@id([election_id, party_id])
}

model VoteCandidate {
  election_id  Int
  candidate_id Int
  score        Int
  candidate    Candidate @relation(fields: [candidate_id], references: [id])
  election     Election  @relation(fields: [election_id], references: [id])

  @@id([election_id, candidate_id])
}

model VoteLog {
  election_id Int      @id
  student_id  String
  election    Election @relation(fields: [election_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "votelog_election_id_fk")
}

model Question {
  id          Int          @id @default(autoincrement())
  topic       String
  question    String
  description String
  type        QuestionType
  election_id Int
  created_at  DateTime     @db.Timestamptz(6)
  Answer      Answer[]
  election    Election     @relation(fields: [election_id], references: [id])
}

model Answer {
  id          Int        @id @default(autoincrement())
  answer      String
  question_id Int
  partyId     Int?
  candidateId Int?
  Candidate   Candidate? @relation(fields: [candidateId], references: [id])
  Party       Party?     @relation(fields: [partyId], references: [id])
  question    Question   @relation(fields: [question_id], references: [id])
}

model ActivityhourLog {
  id          Int      @default(autoincrement())
  election_id Int
  student_id  String   @unique(map: "activityhourlog_pk")
  date        DateTime @db.Timestamp(6)
  Election    Election @relation(fields: [election_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "activityhourlog_election_id_fk")
  Eligible    Eligible @relation(fields: [student_id], references: [student_id], onDelete: NoAction, onUpdate: NoAction, map: "activityhourlog_eligible_student_id_fk")
}

model Waiver {
  id          Int      @id(map: "waiver_pk") @default(autoincrement())
  election_id Int
  student_id  String?
  Election    Election @relation(fields: [election_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "waiver_election_id_fk")
}

enum ElectionType {
  SAPA
  ONGKARN
  SAMO
}

enum QuestionType {
  Party
  Candidate
}

enum Prefix {
  Mr
  Ms
  Mrs
}
