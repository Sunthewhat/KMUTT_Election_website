generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Eligible {
  id            Int       @id @default(autoincrement())
  student_id    String
  prefix        String
  firstname     String
  lastname      String
  firstname_eng String
  lastname_eng  String
  year          Int
  semester      Int
  registered    String
  faculty       String
  prefix_eng    String
  VoteLog       VoteLog[]
}

model Faculty {
  id       Int    @id @default(autoincrement())
  name     String
  name_eng String
}

model Election {
  id            Int             @id @default(autoincrement())
  name          String
  description   String
  created_at    DateTime        @default(now())
  start_date    DateTime        @db.Timetz(6)
  end_date      DateTime
  year          Int
  type          ElectionType
  count_vote    Boolean
  Candidate     Candidate[]
  Party         Party[]
  Question      Question[]
  VoteCandidate VoteCandidate[]
  VoteLog       VoteLog[]
  VoteParty     VoteParty[]
}

model Party {
  id             Int           @id @default(autoincrement())
  application_no String        @unique
  name           String
  abbreviate     String
  amount         Int
  symbol         String
  group_image    String
  is_verified    Boolean
  election_id    Int
  Answer         Answer[]
  election       Election      @relation(fields: [election_id], references: [id])
  PartyMember    PartyMember[]
  VoteParty      VoteParty?
}

model PartyMember {
  id           Int       @id @default(autoincrement())
  no           Int
  position     String
  party_id     Int
  candidate_id Int       @unique
  candidate    Candidate @relation(fields: [candidate_id], references: [id])
  party        Party     @relation(fields: [party_id], references: [id])
}

model Candidate {
  id                   Int             @id @default(autoincrement())
  student_id           String
  prefix               Prefix
  firstname            String
  lastname             String
  nickname             String
  dob                  DateTime
  disciplinary_history Boolean
  year                 Int
  major                String
  department           String?
  gpax                 Float
  contact_id           Int             @unique
  candidate_eng_id     Int             @unique
  election_id          Int
  faculty              String
  Answer               Answer[]
  candidate_eng        CandidateEng    @relation(fields: [candidate_eng_id], references: [id])
  contact              Contact         @relation(fields: [contact_id], references: [id])
  election             Election        @relation(fields: [election_id], references: [id])
  PartyMember          PartyMember?
  VoteCandidate        VoteCandidate[]
}

model CandidateEng {
  id        Int        @id @default(autoincrement())
  firstname String
  lastname  String
  nickname  String
  Candidate Candidate?
}

model Contact {
  id             Int        @id @default(autoincrement())
  phone_no       String
  personal_enail String
  kmutt_email    String
  line_id        String
  facebook       String?
  ig             String?
  address        String
  Candidate      Candidate?
}

model VoteParty {
  election_id Int
  party_id    Int      @unique
  score       Int
  election    Election @relation(fields: [election_id], references: [id])
  party       Party    @relation(fields: [party_id], references: [id])

  @@id([election_id, party_id])
}

model VoteCandidate {
  election_id  Int
  candidate_id Int
  score        Int
  candidate    Candidate @relation(fields: [candidate_id], references: [id])
  election     Election  @relation(fields: [election_id], references: [id])

  @@id([election_id, candidate_id])
}

model VoteLog {
  election_id Int
  eligible_id Int
  election    Election @relation(fields: [election_id], references: [id])
  eligible    Eligible @relation(fields: [eligible_id], references: [id])

  @@id([election_id, eligible_id])
}

model Question {
  id          Int          @id @default(autoincrement())
  topic       String
  question    String
  description String
  created_at  DateTime     @default(now())
  type        QuestionType
  election_id Int
  Answer      Answer[]
  election    Election     @relation(fields: [election_id], references: [id])
}

model Answer {
  id          Int        @id @default(autoincrement())
  answer      String
  question_id Int
  partyId     Int?
  candidateId Int?
  Candidate   Candidate? @relation(fields: [candidateId], references: [id])
  Party       Party?     @relation(fields: [partyId], references: [id])
  question    Question   @relation(fields: [question_id], references: [id])
}

enum ElectionType {
  SAPA
  ONGKARN
  SAMO
}

enum QuestionType {
  Party
  Candidate
}

enum Prefix {
  Mr
  Ms
  Mrs
}
